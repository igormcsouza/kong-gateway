version: "3.8"

services:
  api:
    build:
      context: api/
      dockerfile: Dockerfile

  app:
    build:
      context: app/
      dockerfile: Dockerfile

  postgres:
    image: postgres:13.4-alpine3.14
    environment:
      POSTGRES_DB: kong
      POSTGRES_USER: kong
      POSTGRES_PASSWORD: kong
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "kong"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: on-failure

  kong-migrations:
    image: kong:2.6.0
    command: kong migrations bootstrap && kong migrations up && kong migrations finish
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: postgres
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kong
      KONG_PG_DATABASE: kong
    restart: on-failure

  kong:
    image: kong:2.6.0
    depends_on:
      - postgres
      - api
      - app
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: postgres
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kong
      KONG_PG_DATABASE: kong
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001, 0.0.0.0:8444 ssl
    ports:
      - 8000:8000
      - 8443:8443
      - 8001:8001
      - 8444:8444
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 10s
      timeout: 10s
      retries: 10

  deck:
    build:
      context: .
      dockerfile: Dockerfile.deck
    depends_on:
      kong:
        condition: service_healthy
    volumes:
      - ./kong.yaml:/home/deckuser/kong.yaml
    environment:
      DECK_KONG_ADDR: http://kong:8001
    command:
      - sync
